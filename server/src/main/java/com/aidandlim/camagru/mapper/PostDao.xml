<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aidandlim.camagru.dao.PostDao">

    <select id="selectAll" resultType="com.aidandlim.camagru.dto.Post">
        <![CDATA[
        SELECT
            p.id,
            p.picture,
            p.content,
            p.location,
            p.together,
            CASE
                WHEN MINUTE(TIMEDIFF(NOW(), p.time)) = 0 THEN 'RIGHT NOW'
                WHEN p.time > DATE_ADD(NOW(), INTERVAL-1 HOUR) THEN CONCAT(MINUTE(TIMEDIFF(NOW(), p.time)), ' MINUTES AGO')
                WHEN p.time > DATE_ADD(NOW(), INTERVAL-24 HOUR) THEN CONCAT(HOUR(TIMEDIFF(NOW(), p.time)), ' HOURS AGO')
                ELSE CONCAT(DATEDIFF(NOW(), p.time), ' DAYS AGO') END as post_time,
            u.id as user_id,
            u.nickname as user_nickname,
            u.picture as user_picture,
            (SELECT COUNT(*) FROM reflection WHERE post_id = p.id) as num_likes,
            (SELECT COUNT(*) FROM comment WHERE post_id = p.id) as num_comments,
            (SELECT COUNT(*) FROM reflection WHERE post_id = p.id AND user_id = #{user_id}) as user_islike
        FROM
            post as p
        LEFT JOIN
            user as u
        ON
            p.user_id = u.id
        WHERE
            (
                u.id = #{user_id}
                OR
                u.isPrivate = 0
            )
            AND
            p.id < IF(#{call} = 0, (SELECT MAX(id) + 1 FROM post), #{call})
        ORDER BY p.id DESC
        LIMIT 0, 5
        ]]>
    </select>

    <select id="selectAllByUser" resultType="com.aidandlim.camagru.dto.Post">
        SELECT
            *
        FROM
            post as p
        LEFT JOIN
            user as u
        ON
            p.user_id = u.id
        WHERE
            u.id = #{id}
        ORDER BY p.id DESC
    </select>

    <select id="select" resultType="com.aidandlim.camagru.dto.Post">
        <![CDATA[
        SELECT
            p.id,
            p.picture,
            p.content,
            p.location,
            p.together,
            CASE
                WHEN MINUTE(TIMEDIFF(NOW(), p.time)) = 0 THEN 'RIGHT NOW'
                WHEN p.time > DATE_ADD(NOW(), INTERVAL-1 HOUR) THEN CONCAT(MINUTE(TIMEDIFF(NOW(), p.time)), ' MINUTES AGO')
                WHEN p.time > DATE_ADD(NOW(), INTERVAL-24 HOUR) THEN CONCAT(HOUR(TIMEDIFF(NOW(), p.time)), ' HOURS AGO')
                ELSE CONCAT(DATEDIFF(NOW(), p.time), ' DAYS AGO') END as post_time,
            u.id as user_id,
            u.nickname as user_nickname,
            u.picture as user_picture,
            (SELECT COUNT(*) FROM reflection WHERE post_id = p.id) as num_likes,
            (SELECT COUNT(*) FROM comment WHERE post_id = p.id) as num_comments,
            (SELECT COUNT(*) FROM reflection WHERE post_id = p.id AND user_id = #{user_id}) as user_islike
        FROM
            post as p
        LEFT JOIN
            user as u
        ON
            p.user_id = u.id
        WHERE
            p.id = #{id}
        ]]>
    </select>

    <select id="selectUserEmailByPostId" resultType="java.lang.String">
        SELECT
            u.email
        FROM
            post as p
        LEFT JOIN
            user as u
        ON
            p.user_id = u.id
        WHERE
            p.id = #{post_id}
            AND
            u.id != #{user_id}
            AND
            u.isNotificate = 1
    </select>

    <insert id="insert">
        INSERT INTO post
            (user_id, picture, content, location, together)
        VALUES
            (#{user_id}, #{picture}, #{content}, #{location}, #{together})
    </insert>

    <delete id="delete">
        DELETE FROM
            post
        WHERE
            id = #{id}
    </delete>

</mapper>